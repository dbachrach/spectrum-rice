<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spectrum</name>
    </assembly>
    <members>
        <member name="M:Spectrum.Model.GameObject.LoadContent(Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Load the texture for the sprite using the Content Pipeline
            </summary>
        </member>
        <member name="M:Spectrum.Model.GameObject.LoadPhysicsBody(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Load the Farseer body and geometry objects for this object
            </summary>
            <param name="size">Size of the object</param>
            <param name="isStatic">Whether the object should be rendered at a static position</param>
        </member>
        <member name="M:Spectrum.Model.GameObject.Reap(System.Boolean)">
            <summary>
            Removes the object and all of its children and cleans up references in its parents
            </summary>
            <param name="devestation">true to remove the object from the level and the physics engine
                                      false to just remove the object from the level but not the engine </param>
        </member>
        <member name="M:Spectrum.Model.GameObject.ReapChildren">
            <summary>
            Calls reap on all of the object's children
            </summary>
        </member>
        <member name="M:Spectrum.Model.GameObject.OnCollision(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.ContactList)">
            <summary>
            Gets called by the physics engine to determine if two objects should collide.
            Returns a boolean based on whether the objects are both tangible and should collide.
            If two objects colide, this calls the DidCollideWithObject() notification on both objects.
            </summary>
        </member>
        <member name="M:Spectrum.Model.GameObject.OnSeparation(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Gets called by the physics engine when two objects separate.
            This calls the DidSeparateWith() notification on both objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spectrum.Model.GameObject.InViewport">
            <summary>
            Whether any part of this object is currently within the borders of the window.
            </summary>
        </member>
        <member name="M:Spectrum.Model.GameObject.MakeDeadly">
            <summary>
            Makes player lose if he collides with this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Id">
            <summary>
            String reference to this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Visibility">
            <summary>
            Colors this object is visible in
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Tangibility">
            <summary>
            Colors this object will collide in (for physics engine)
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.PlayerTangibility">
            <summary>
            Colors this object will collide with the player in
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Sensibility">
            <summary>
            Colors in which this object will be sent a "would be" collision
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.PlayerSensibility">
            <summary>
            Colors in which this object will be sent a "would be" collision with the player
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.ImageName">
            <summary>
            Name of the image file (without file extension) to draw for this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Parents">
            <summary>
            List of objects that were combined together to make this object. 
            Empty if this object was not made from a combination.
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Children">
            <summary>
            List of objects that this parent has made via combination.
            Empty if this object has made no objects.
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.CombinableWith">
            <summary>
            List of objects that this object may combine with
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.CurrentlyCombined">
            <summary>
            List of objects this object is currently combined with
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Pickupable">
            <summary>
            Whether this object may be picked up by the player
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Events">
            <summary>
            List of events that this object may fire
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Container">
            <summary>
            Level that this object is contained in
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.FrameCount">
            <summary>
            Number of frames in the animation to draw this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.FramesPerSec">
            <summary>
            Speed to render the animation at
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.DirectionFacing">
            <summary>
            Direction this object is currently facing
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.OriginalPosition">
            <summary>
            Original coordinates for this object when it is initially loaded
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.OriginalVelocity">
            <summary>
            Original velocity to start the object at when it is loaded
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.ZIndex">
            <summary>
            Index to order this object when drawn to the screen.
            Positive numbers draw behind the player.
            Negative numbers draw in front of the player.
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.HasBecomeVisibleInAllColors">
            <summary>
            Whether this object should now be displayed in White Mode
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Scale">
            <summary>
            Scale at which to render the image to the screen
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.body">
            <summary>
            Physics body representing this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.geom">
            <summary>
            Physics geometry representing this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.joint">
            <summary>
            Physics joint associated with this object
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Mass">
            <summary>
            Physics mass this object has
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.IsStatic">
            <summary>
            Whether this object appears in a static location on the screen
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Size">
            <summary>
            Size of this object in screen pixels
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.InitialBounciness">
            <summary>
            Initial physical bounciness
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.InitialLinearDrag">
            <summary>
            Initial physical linear drag
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.InitialFriction">
            <summary>
            Initial physical friction
            </summary>
        </member>
        <member name="P:Spectrum.Model.GameObject.Leader">
            <summary>
            Object that this object will follow
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Mathematics.ConvertUnits">
            <summary>
            Convert units between display and simulation units.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.LinkType">
            <summary>
            Determine the type of joint or spring used to link bodies, in the path generator.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.LinkType.RevoluteJoint">
            <summary>
            Use a revolute point
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.LinkType.PinJoint">
            <summary>
            Use a pin joint
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.LinkType.SliderJoint">
            <summary>
            Use a slider joint
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.LinkType.LinearSpring">
            <summary>
            Use a linear spring
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.FrictionType">
            <summary>
            Used to determine the type of friction applied to geometries.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.FrictionType.Average">
            <summary>
            Takes the average of the friction from the two geometries colliding.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.FrictionType.Minimum">
            <summary>
            Takes the minimum of the friction from the two geometries colliding.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.GravityType">
            <summary>
            Defines the type of gravity.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.GravityType.DistanceSquared">
            <summary>
            Gives the most realistic gravity.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.GravityType.Linear">
            <summary>
            Not as realistic as DistanceSquared, but performs better when controlling a lot of bodies.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring">
            <summary>
            Attaches 2 bodies with a spring. Works kind of like a rubber band.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring">
            <summary>
            Provides common functionality for springs.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Interfaces.IIsDisposable">
            <summary>
            Interface used by the generic list
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.Breakpoint">
            <summary>
            The Breakpoint simply indicates the maximum Value the JointError can be before it breaks.
            The default value is float.MaxValue
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.DampingConstant">
            <summary>
            The amount of spring damping to be applied.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.Enabled">
            <summary>
            Determines if the spring is enabled or not.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.SpringConstant">
            <summary>
            The amount of spring force to be applied.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.Tag">
            <summary>
            Tag that can contain a user specified object.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.SpringError">
            <summary>
            Gets or sets the spring error. The SpringError is a measure of how "broken" a spring is.
            When the SpringError is greater than the Breakpoint, the spring is automatically disabled.
            </summary>
            <Value>The spring error.</Value>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Dynamics.Springs.Spring.Broke">
            <summary>
            Fires when the spring is broken.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring.Body1">
            <summary>
            Gets or sets the fist body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring.AttachPoint1">
            <summary>
            Gets or sets the fist attach point.
            </summary>
            <Value>The attach point1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring.AttachPoint2">
            <summary>
            Gets or sets the second attach point.
            </summary>
            <Value>The attach point2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.LinearSpring.RestLength">
            <summary>
            Gets or sets the length of the rest.
            </summary>
            <Value>The length of the rest.</Value>
        </member>
        <member name="T:Spectrum.Model.JSON">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="F:Spectrum.Model.JSON.lastErrorIndex">
            <summary>
            On decoding, this value holds the position at which the parse failed (-1 = no error).
            </summary>
        </member>
        <member name="M:Spectrum.Model.JSON.JsonDecode(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Spectrum.Model.JSON.JsonEncode(System.Object)">
            <summary>
            Converts a Hashtable / ArrayList object into a JSON string
            </summary>
            <param name="json">A Hashtable / ArrayList</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:Spectrum.Model.JSON.LastDecodeSuccessful">
            <summary>
            On decoding, this function returns the position at which the parse failed (-1 = no error).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spectrum.Model.JSON.GetLastErrorIndex">
            <summary>
            On decoding, this function returns the position at which the parse failed (-1 = no error).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spectrum.Model.JSON.GetLastErrorSnippet">
            <summary>
            If a decoding error occurred, this function returns a piece of the JSON string 
            at which the error took place. To ease debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spectrum.Model.JSON.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, etc). C# has no pretty way to do this.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Parser.Parse(System.String)">
            Takes a file path to a JSON encoded representation of a Level and returns a Level object
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring">
            <summary>
            Puts 2 bodies at an angle. The angle is variable.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring.Body1">
            <summary>
            Gets or sets the first body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring.TargetAngle">
            <summary>
            Gets or sets the target angle.
            </summary>
            <Value>The target angle.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring.MaxTorque">
            <summary>
            Gets or sets the max torque.
            </summary>
            <Value>The max torque.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.AngleSpring.TorqueMultiplier">
            <summary>
            The resultant torque will be multiplied by this Value prior to being applied to the bodies.
            For normal spring behavior this Value should be 1
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Path">
            <summary>
            Path Generator. Used to create dynamic paths along control points.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.Dynamics.Path"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="endless">if set to <c>true</c> [endless].</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.Dynamics.Path"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="linkWidth">The distance between links.</param> 
            <param name="mass">The mass.</param>
            <param name="endless">if set to <c>true</c> [endless].</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.LinkBodies(FarseerGames.FarseerPhysics.LinkType,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Links the bodies.
            </summary>
            <param name="type">The type of Joint to link with.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="springConstant">The spring constant.</param>
            <param name="dampingConstant">The damping constant.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.LinkBodies(FarseerGames.FarseerPhysics.LinkType,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Links the bodies.
            </summary>
            <param name="type">The type of Joint to link with.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="springConstant">The spring constant.</param>
            <param name="dampingConstant">The damping constant.</param>
            <param name="springRestLengthFactor">The spring rest length factor</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.AddToPhysicsSimulator(FarseerGames.FarseerPhysics.PhysicsSimulator)">
            <summary>
            Adds the path to the physics simulator.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.RemoveFromPhysicsSimulator(FarseerGames.FarseerPhysics.PhysicsSimulator)">
            <summary>
            Remove all the elements of a path from the physics simulator.
            </summary>
            <param name="physicsSimulator"></param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.CreateGeoms(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Int32)">
            <summary>
            Creates rectangular geoms that match the size of the bodies.
            Then adds the geometries to the given physics simulator.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="collisionGroup">The collision group.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.CreateGeoms(System.Int32)">
            <summary>
            Creates rectangular geoms that match the size of the bodies.
            </summary>
            <param name="collisionGroup">The collision group.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.CreateGeoms(FarseerGames.FarseerPhysics.CollisionCategory,FarseerGames.FarseerPhysics.CollisionCategory,FarseerGames.FarseerPhysics.PhysicsSimulator)">
            <summary>
            Creates rectangular geoms that match the size of the bodies.
            Then adds the geometries to the given physics simulator.
            </summary>
            <param name="collisionCategory">The collision category of the geometries.</param>
            <param name="collidesWith">The collisioncategory the geometries should collide with..</param>
            <param name="physicsSimulator">The physics simulator.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.CreateGeoms(FarseerGames.FarseerPhysics.CollisionCategory,FarseerGames.FarseerPhysics.CollisionCategory)">
            <summary>
            Creates rectangular geoms that match the size of the bodies.
            </summary>
            <param name="collisionCategory">The collision category.</param>
            <param name="collidesWith">What collision group geometries collides with.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.PointInControlPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets index of control point if point is inside it.
            </summary>
            <param name="point">Point to test against.</param>
            <returns>Index of control point or -1 if no intersection.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.MoveControlPoint(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Moves a control point.
            </summary>
            <param name="position">The position.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Add(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds a control point to the paths end.
            </summary>
            <param name="controlPoint">Vector2 to add.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Add(FarseerGames.FarseerPhysics.Dynamics.Body)">
            <summary>
            Adds the specified body.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Add(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Adds the specified geom.
            </summary>
            <param name="geom">The geom.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Add(FarseerGames.FarseerPhysics.Dynamics.Joints.Joint)">
            <summary>
            Adds the specified joint.
            </summary>
            <param name="joint">The joint.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Add(FarseerGames.FarseerPhysics.Dynamics.Springs.Spring)">
            <summary>
            Adds the specified spring.
            </summary>
            <param name="spring">The spring.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Remove(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Removes a control point from the path.
            </summary>
            <param name="controlPoint">Vector2 to remove.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Remove(System.Int32)">
            <summary>
            Removes a control point from the path by index.
            </summary>
            <param name="index">Index of Vector2 to remove.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Path.Update">
            <summary>
            Performs a complete update of the path.
            NOTE: should not be performed on a path
            in simulation.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Path.Bodies">
            <summary>
            Gets the bodies.
            </summary>
            <Value>The bodies.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Path.Joints">
            <summary>
            Gets the joints.
            </summary>
            <Value>The joints.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Path.Geoms">
            <summary>
            Gets the geoms.
            </summary>
            <Value>The geoms.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Path.Springs">
            <summary>
            Gets the springs.
            </summary>
            <Value>The springs.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Path.ControlPoints">
            <summary>
            Gets the control points.
            </summary>
            <Value>The control points.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.WaveController">
            <summary>
            The WaveController simulates wave motion. It's driven by a mathematical algorithm (not physics) which dynamically 
            alters a polygonal shape to mimic waves.
            
            The WaveController can be viewed as a rectangle shape but with the top of the rectangle broken into 
            multiple segments defined by a set of vertices. When the algorithm is operating, any disturbance in 
            the y-position of one of these vertices will cause a wave to ripple across the other vertices.
            
            The speed and shape of the wave depend on a number of parameters and on the number of vertices used
            to define the surface of the water.
            
            The WaveController can also (but does not have to) work in conjunction with the <see cref="T:FarseerGames.FarseerPhysics.Controllers.FluidDragController"/> in
            order to have fluid physics applied to any body that falls within the area defined by the WaveController.
            
            The WaveController also implements some wave generator functionality. By default, the WaveController will
            just sit still until one or more of its vertices are disturbed.  The wave generator is simply a controlled
            means of disturbing the vertices of the WaveController.  The wave generator acts by moving the right-most 
            vertice up and down at a rate defined by a combination of WaveGeneratorMax, WaveGeneratorMin, and WaveGeneratorStep.
            
            You can visualize the wave generator by imagining a person holding a string that is attached to a wall. If 
            the person were to move their arm holding the string up and down to create a wave like motion in the string, they
            would be acting very similar to how the wave generator works.
             
            
            If you want the details behind the wave algorithm see the following:
            http://freespace.virgin.net/hugo.elias/graphics/x_water.htm
            http://www.gamedev.net/reference/articles/article915.asp
             
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.Controller">
            <summary>
            Provides common functionality for controllers.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Controllers.Controller.Enabled">
            <summary>
            If false, this controller will not be processed/updated.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.Controller.Validate">
            <summary>
            Validates this instance. 
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.Controller.Update(System.Single,System.Single)">
            <summary>
            Updates this instance.
            </summary>
            <param name="dt">The time since last update.</param>
            <param name="dtReal">The real time since last update.</param>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.Controller.Tag">
            <summary>
            Gets or sets the tag. The Tag can contain a custom object.
            </summary>
            <Value>The tag.</Value>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.WaveController.Disturb(System.Single,System.Single)">
            <summary>
            Create a disturbance in the water surface that will create waves.  The disturbance created will "ripple" across
            the surface of the "water" based on the parameters that define the <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/>.
            This could be used to create waves when something falls in the water. For this,though, you would need to determine what vertices
            to move and how far.
            </summary>
            <param name="x">The node to change the height of</param>
            <param name="offset">The amount to move the node up or down (negative values moves the node up, positive moves it down)</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.WaveController.Initialize">
            <summary>
            Initialize the wave controller.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.WaveController.Update(System.Single,System.Single)">
            <summary>
            Steps the wave algorithm.  The wave algorithm does not run at the same speed as the physics simulator. It runs at its
            own frequency set by the Frequency property.
            </summary>
            <param name="dt">The time since last update.</param>
            <param name="dtReal">The real time since last update.</param>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.Width">
            <summary>
            The width of the wave area.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.Height">
            <summary>
            The height of the wave area. Best thought of as the depth of the water.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.Position">
            <summary>
            Top left position of wave area
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.NodeCount">
            <summary>
            How many vertices to use for the surface of the water. Determines, along with other parameters, the shape of the waves.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.DampingCoefficient">
            <summary>
            Determines how quickly the waves dissipate.  A Value of zero will cause any disturbance in the water surface to ripple forever. 
            Values closer to 1 will cause the waves to smooth out quickly.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.CurrentWave">
            <summary>
            An array representing the current y-offset of each vertice from its rest position.  The "rest" position is the same as the
            y-component of the "Position" property of the <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/>.  These Value can be used to visually represent the wave.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.PreviousWave">
            <summary>
            Used by the algorithm but not really needed externally.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.XPosition">
            <summary>
            An array of x positions that represents the x position of the vertices that make up the wave.
            This can be used to create the visuals for your wave.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.WaveGeneratorMax">
            <summary>
            The max offset that you want the wave generator to move the control vertice
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.WaveGeneratorMin">
            <summary>
            The min offset that you want the wave generator to move the control vertice
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.WaveGeneratorStep">
            <summary>
            How many steps you want it to take for the wave generator to move the control vertices between the
            min and max.  The vertice will be moved every time Update(..) runs which in-turn is controlled by the 
            Frequency property.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.WaveController.Frequency">
            <summary>
            Determines how fast the wave algorithm (NOT the wave generator) runs. The best way to understand this property 
            is to try some different values and watch the affect.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.CollisionEventHandler">
            <summary>
            This delegate is called when a collision between 2 geometries occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SeparationEventHandler">
            <summary>
            This delegate is called when a separation between 2 geometries occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Geom">
            <summary>
            The geometry class is the heart of collision detection.
            A Geom need a body and a set of vertices. The vertices should define the edge of the shape.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.InSimulation">
            <summary>
            Returns true if the geometry is added to the simulation.
            Returns false if the geometriy is not.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.CollidesWith">
            <summary>
            Gets or sets the collision categories that this geom collides with.
            </summary>
            <Value>The collides with.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.CollisionCategories">
            <summary>
            Gets or sets the collision categories.
            Member off all categories by default
            </summary>
            <Value>The collision categories.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.CollisionResponseEnabled">
            <summary>
            Gets or sets a value indicating whether collision response is enabled.
            If 2 geoms collide and CollisionResponseEnabled is false, then impulses will not be calculated
            for the 2 colliding geoms. They will pass through each other, but will still be able to fire the
            <see cref="F:FarseerGames.FarseerPhysics.Collisions.Geom.OnCollision"/> event.
            </summary>
            <Value>
            	<c>true</c> if collision response enabled; otherwise, <c>false</c>.
            </Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.FrictionCoefficient">
            <summary>
            Controls the amount of friction a geometry has when in contact with another geometry. A Value of zero implies
            no friction. When two geometries collide, (by default) the average friction coefficient between the two bodies is used.
            This is controlled using the PhysicsSimulator.FrictionType
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.RestitutionCoefficient">
            <summary>
            The coefficient of restitution of the geometry.
            <para>This parameter controls how bouncy an object is when it collides with other
            geometries. Valid values range from 0 to 1 inclusive.  1 implies 100% restitution (perfect bounce)
            0 implies no restitution (think a ball of clay)</para>
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.CollisionGroup">
            <summary>
            Gets or sets the collision group.
            If 2 geoms are in the same collision group, they will not collide.
            </summary>
            <Value>The collision group.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Geom.CollisionEnabled">
            <summary>
            Gets or sets a Value indicating whether collision is enabled.
            </summary>
            <Value><c>true</c> if collision is enabled; otherwise, <c>false</c>.</Value>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.Collisions.Geom"/> class.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.#ctor(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.Collisions.Geom"/> class.
            </summary>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="collisionGridSize">Size of the collision grid.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.#ctor(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.Collisions.Geom"/> class.
            </summary>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.#ctor(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Creates a clone of an already existing geometry
            </summary>
            <param name="body">The body</param>
            <param name="geometry">The geometry to clone</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.#ctor(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a clone of an already existing geometry
            </summary>
            <param name="body">The body</param>
            <param name="geometry">The geometry to clone</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.SetVertices(FarseerGames.FarseerPhysics.Collisions.Vertices)">
            <summary>
            Sets the vertices of the geom.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.SetBody(FarseerGames.FarseerPhysics.Dynamics.Body)">
            <summary>
            Sets the body.
            </summary>
            <param name="bodyToSet">The body.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.GetWorldPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the world position.
            </summary>
            <param name="localPosition">The local position.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.GetNearestDistance(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the nearest distance relative to the point given.
            </summary>
            <param name="point">The point that should be calculated against.</param>
            <returns>The distance</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.GetDistanceToEdge(Microsoft.Xna.Framework.Vector2@,System.Int32)">
            <summary>
            Gets the distance to edge.
            </summary>
            <param name="point">The point.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.GetNearestFeature(Microsoft.Xna.Framework.Vector2@,System.Int32)">
            <summary>
            Gets the nearest feature relative to a point.
            </summary>
            <param name="point">The point.</param>
            <param name="index">The index of a vector in the vertices.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Collide(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks to see if the geom collides with the specified point.
            </summary>
            <param name="position">The point.</param>
            <returns>true if colliding</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Collide(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Checks to see if the geom collides with the specified point.
            </summary>
            <param name="position">The point.</param>
            <returns>true if colliding</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.FastCollide(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Exactly the same as Collide(), but does not do the AABB check because it was done elsewhere.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Collide(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Checks to see if the geom collides with the specified geom.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.TransformToLocalCoordinates(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms a world vertex to local vertex.
            </summary>
            <param name="worldVertex">The world vertex.</param>
            <param name="localVertex">The local vertex.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.TransformNormalToWorld(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Transforms a local normal to a world normal.
            </summary>
            <param name="localNormal">The local normal.</param>
            <param name="worldNormal">The world normal.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Update">
            <summary>
            Transform the local vertices to world vertices.
            Also updates the AABB of the geometry to the new values.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            Subclasses can override incase they need to dispose of resources otherwise do nothing.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Geom.Equals(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Geom.Position">
            <summary>
            Gets the position. Compared to Body.Position, this property takes position offset of the geometry into account.
            </summary>
            <Value>The position.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Geom.Rotation">
            <summary>
            Gets the rotation. Compared to Body.Rotation, this property takes rotation offset of the geometry into account.
            </summary>
            <Value>The rotation.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Geom.MatrixInverse">
            <summary>
            Gets the inverse matrix.
            </summary>
            <Value>The matrix inverse.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Geom.IsSensor">
            <summary>
            Gets or sets a Value indicating whether this instance is a sensor.
            A sensor does not calculate impulses and does not change position (it's static)
            it does however detect collisions. Sensors can be used to sense other geoms.
            </summary>
            <Value><c>true</c> if this instance is sensor; otherwise, <c>false</c>.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Geom.GridCellSize">
            <summary>
            The size of the grid cells used in the distance grid narrow phase collider.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.DistanceGrid">
            <summary>
            Grid is used to test for intersection.
            Computation of the grid may take a long time, depending on the grid cell size provided.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.DistanceGrid._gridCellSizeAABBFactor">
             <summary>
            used to calculate a cell size from the AABB whenever the collisionGridCellSize
            is not set explicitly. The more sharp corners a body has, the smaller this Value will 
            need to be. 
             </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.Collide(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.ContactList)">
            <summary>
            Finds the contactpoints between the two geometries.
            </summary>
            <param name="geomA">The first geom.</param>
            <param name="geomB">The second geom.</param>
            <param name="contactList">The contact list.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.CreateDistanceGrid(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Computes the grid.
            </summary>
            <param name="geom">The geometry.</param>
            <exception cref="T:System.ArgumentNullException"><c>geometry</c> is null.</exception>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.RemoveDistanceGrid(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Removes a distance grid from the cache.
            </summary>
            <param name="geom">The geom.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.Copy(System.Int32,System.Int32)">
            <summary>
            Copies the distance grid from one id to another. This is used in cloning of geometries.
            </summary>
            <param name="fromId">From id.</param>
            <param name="toId">To id.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.CalculateGridCellSizeFromAABB(FarseerGames.FarseerPhysics.Collisions.AABB@)">
            <summary>
            Calculates the grid cell size from AABB.
            </summary>
            <param name="aabb">The AABB.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGrid.Intersect(FarseerGames.FarseerPhysics.Collisions.Geom,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Checks if the specified geom intersect the specified point.
            </summary>
            <param name="geom">The geom.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.DistanceGridData">
            <summary>
            Class that holds the distancegrid data
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.DistanceGridData.Intersect(Microsoft.Xna.Framework.Vector2@,FarseerGames.FarseerPhysics.Collisions.Feature@)">
            <summary>
            Checks if the grid intersects with the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="feature">The feature.</param>
            <returns></returns>
        </member>
        <member name="M:Spectrum.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.Joint">
            <summary>
            Provides common functionality for joints.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Joints.Joint.Breakpoint">
            <summary>
            The Breakpoint simply indicates the maximum Value the JointError can be before it breaks.
            The default value is float.MaxValue
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.Joint.JointError">
            <summary>
            Gets the joint error. The JointError is a measure of how "broken" a joint is.
            When the JointError is greater than the Breakpoint, the joint is automatically disabled.
            </summary>
            <Value>The joint error.</Value>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Dynamics.Joints.Joint.Broke">
            <summary>
            Fires when the joint is broken.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleJoint">
            <summary>
            Fixed angle joint put a body at an angle in it's current position
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleJoint.TargetAngle">
            <summary>
            Gets or sets the target angle.
            </summary>
            <Value>The target angle.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleJoint.MaxImpulse">
            <summary>
            Gets or sets the max impulse.
            </summary>
            <Value>The max impulse.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Arbiter">
            <summary>
            Used for collision detection.
            Constructed when 2 geoms collide. Applies impulses between the 2 geoms.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Arbiter.ContactList">
            <summary>
            Fully exposed for convenience. Should be treated as. Do not add or remove directly from this list.
            </summary>
        </member>
        <member name="P:Spectrum.View.IColorIndicator.MoveBG">
            <summary>
            True to have the background move when the color changes. 
            False to have the indicator move when the color changes.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.GeomFactory">
            <summary>
            An easy to use factory for creating geoms
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single)">
            <summary>
            Creates a rectangle geometry.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The geometry</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single)">
            <summary>
            Creates a rectangle geometry.
            </summary>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The geometry</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a rectangle geometry.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="positionOffset">The position offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns>The geometry</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a rectangle geometry.
            </summary>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="positionOffset">The position offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns>The geometry</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Single)">
            <summary>
            Creates the rectangle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="collisionGridSize">Size of the collision grid cells. Pass in 0 or less automatically calculate the grid cell size. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Single)">
            <summary>
            Creates the rectangle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates the rectangle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="positionOffset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateRectangleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates the rectangle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="positionOffset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ellipse geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ellipse geom.
            </summary>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a ellipse geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a ellipse geom.
            </summary>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a ellipse geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            Creates an ellipse geometry
            </summary>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates the ellipse geometry.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateEllipseGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates the ellipse geom.
            </summary>
            <param name="body">The body.</param>
            <param name="xRadius">The x radius.</param>
            <param name="yRadius">The y radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="collisionGridSize">Size of the collision grid.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateCircleGeom(FarseerGames.FarseerPhysics.Dynamics.Body,System.Single,System.Int32,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a circle geom.
            </summary>
            <param name="body">The body.</param>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreatePolygonGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single)">
            <summary>
            Creates a polygon geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT
            Put in 0 or less to make the engine calculate a grid cell size.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreatePolygonGeom(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single)">
            <summary>
            Creates a polygon geom.
            </summary>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT
            Put in 0 or less to make the engine calculate a grid cell size.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreatePolygonGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a polygon geom.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="positionOffset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT
            Put in 0 or less to make the engine calculate a grid cell size.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreatePolygonGeom(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Creates a polygon geom.
            </summary>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="positionOffset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <param name="collisionGridSize">Size of the collision grid. - not used with SAT
            Put in 0 or less to make the engine calculate a grid cell size.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateSATPolygonGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Int32)">
            <summary>
            Creates a polygon geometry.
            Use this if you use the SAT narrow phase collider. It will automatically decompose concave geometries using auto-divide.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="maxGeoms">The number of geometries to split the geometry into. It is needed to make SAT support concave polygons. The engine will try to reach the desired number of geometries.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateSATPolygonGeom(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Int32)">
            <summary>
            Creates a polygon geometry.
            Use this if you use the SAT narrow phase collider. It will automatically decompose concave geometries using auto-divide.
            </summary>
            <param name="body">The body.</param>
            <param name="vertices">The vertices.</param>
            <param name="numberOfGeoms">The number of geoms.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Creates a clone of a geometry.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="geometry">The geometry to clone.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateGeom(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Creates a clone of a geometry.
            </summary>
            <param name="body">The body.</param>
            <param name="geometry">The geometry to clone.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateGeom(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a clone of a geometry.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="body">The body.</param>
            <param name="geometry">The geometry to clone.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.GeomFactory.CreateGeom(FarseerGames.FarseerPhysics.Dynamics.Body,FarseerGames.FarseerPhysics.Collisions.Geom,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Creates a clone of a geometry.
            </summary>
            <param name="body">The body.</param>
            <param name="geometry">The geometry to clone.</param>
            <param name="offset">The offset.</param>
            <param name="rotationOffset">The rotation offset.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint">
            <summary>
            Slider joint is just like pin joint, but the distance between the bodies are not fixed.
            The bodies can move towards or away from each other within limits.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Body1">
            <summary>
            Gets or sets the first body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Slop">
            <summary>
            Gets or sets the slop.
            </summary>
            <Value>The slop.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Min">
            <summary>
            Gets or sets the min.
            </summary>
            <Value>The min.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Max">
            <summary>
            Gets or sets the max.
            </summary>
            <Value>The max.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Anchor1">
            <summary>
            Gets or sets the first anchor.
            </summary>
            <Value>The anchor1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.Anchor2">
            <summary>
            Gets or sets the second anchor.
            </summary>
            <Value>The anchor2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.WorldAnchor1">
            <summary>
            Gets the first world anchor.
            </summary>
            <Value>The world anchor1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.WorldAnchor2">
            <summary>
            Gets the second world anchor.
            </summary>
            <Value>The world anchor2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.SliderJoint.CurrentAnchorPosition">
            <summary>
            Gets the current anchor position.
            </summary>
            <Value>The current anchor position.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.RayHelper">
            <summary>
            Collection of helper methods for misc collisions.
            Does float tolerance and line collisions with lines and AABBs.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Boolean,System.Boolean,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="point">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <param name="floatTolerance">Some of the calculations require
            checking if a floating point Value equals another. This is
            the tolerance that is used to determine this (ie Value +
            or - <paramref name="floatTolerance"/>)</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineIntersect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Boolean,System.Boolean,System.Single,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <param name="floatTolerance">Some of the calculations require
            checking if a floating point Value equals another. This is
            the tolerance that is used to determine this (ie Value +
            or - <paramref name="floatTolerance"/>)</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineIntersect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentVerticesIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2}@)">
            <summary>
            Get all intersections between a line segment and a list of vertices
            representing a polygon. The vertices reuse adjacent points, so for example
            edges one and two are between the first and second vertices and between the
            second and third vertices. The last edge is between vertex vertices.Count - 1
            and verts0. (ie, vertices from a Geometry or AABB)
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="vertices">The vertices, as described above</param>
            <param name="intersectionPoints">An list of intersection points. Any intersection points
            found will be added to this list.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentAABBIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,FarseerGames.FarseerPhysics.Collisions.AABB,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2}@)">
            <summary>
            Get all intersections between a line segment and an AABB. 
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="aabb">The AABB that is used for testing intersection.</param>
            <param name="intersectionPoints">An list of intersection points. Any intersection points found will be added to this list.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentGeomIntersect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,FarseerGames.FarseerPhysics.Collisions.Geom,System.Boolean,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2}@)">
            <summary>
            Detects all collision points between a line and a Geom. If intersections exist
            a LineIntersectionInfo  object is created and added to an existing list of such
            objects. </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test</param>
            <param name="geom">The geometry to test.</param>
            <param name="detectUsingAABB">If true, intersection will be tested using the
            Geoms AABB. If false, the Geoms vertices will be used.</param>
            <param name="intersectionPoints">An existing points info list to add to
            </param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentGeomIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,FarseerGames.FarseerPhysics.Collisions.Geom,System.Boolean,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2}@)">
            <summary>
            Detects all collision points between a line and a Geom. If intersections exist a LineIntersectionInfo 
            object is created and added to an existing list of such objects.
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test</param>
            <param name="geom">The geometry to test.</param>
            <param name="detectUsingAABB">If true, intersection will be tested using the Geoms AABB. If false, the Geoms vertices will be used.</param>
            <param name="intersectionPoints">An existing point list to add to</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentAllGeomsIntersect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,FarseerGames.FarseerPhysics.PhysicsSimulator,System.Boolean)">
            <summary>
            Gets a list of geometries and their intersectionpoints that the line intersects.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="simulator">The simulator.</param>
            <param name="detectUsingAABB">if set to <c>true</c> [detect using AABB].</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.RayHelper.LineSegmentAllGeomsIntersect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,FarseerGames.FarseerPhysics.PhysicsSimulator,System.Boolean)">
            <summary>
            Gets a list of geometries and their intersectionpoints that the line intersects.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="simulator">The simulator.</param>
            <param name="detectUsingAABB">if set to <c>true</c> [detect using AABB].</param>
            <returns></returns>
        </member>
        <member name="M:Spectrum.View.MenuItem.#ctor(System.String,System.String,Microsoft.Xna.Framework.Graphics.SpriteFont,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name">Internal name of the menu</param>
            <param name="text">Text to be drawn to the screen</param>
            <param name="font">Font to draw the text in</param>
            <param name="position">Where to draw the text</param>
            <param name="baseColor">Default color of the text</param>
            <param name="selectedColor">Highlighted color of the text</param>
            <param name="selected">Whether or not the menu item is highlighted</param>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Mathematics.CircularInterpolator">
            <summary>
            Encapsulates the logic to do bilinear interpolation
            .V1    .V4
            .V2    .V3
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Mathematics.BilinearInterpolator">
            <summary>
            Encapsulates the logic to do bilinear interpolation
            .V1    .V4
            .V2    .V3
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedLinearSpring">
            <summary>
            Fixed linear spring attaches a body to a fixed point.
            The linear spring is acting kind of like a rubber band.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedLinearSpring.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <Value>The body.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedLinearSpring.BodyAttachPoint">
            <summary>
            Gets or sets the body attach point.
            </summary>
            <Value>The body attach point.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedLinearSpring.WorldAttachPoint">
            <summary>
            Gets or sets the world attach point.
            </summary>
            <Value>The world attach point.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedLinearSpring.RestLength">
            <summary>
            Gets or sets the length of the rest.
            </summary>
            <Value>The length of the rest.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedAngleSpring">
            <summary>
            Puts a body at an angle at the body's current position. The angle is variable.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedAngleSpring.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <Value>The body.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedAngleSpring.TargetAngle">
            <summary>
            Gets or sets the target angle.
            </summary>
            <Value>The target angle.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedAngleSpring.MaxTorque">
            <summary>
            Gets or sets the max torque.
            </summary>
            <Value>The max torque.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Springs.FixedAngleSpring.TorqueMultiplier">
            <summary>
            The resultant torque will be multiplied by this Value prior to being applied to the bodies.
            For normal spring behavior this Value should be 1
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider">
            <summary>
            A broad phase collider that uses the Selective Sweep algorithm
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.Add(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Adds the specified geom.
            </summary>
            <param name="geom">The geom.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.ProcessRemovedGeoms">
            <summary>
            Processes the removed geoms.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.ProcessDisposedGeoms">
            <summary>
            Processes the disposed geoms.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.InternalUpdate">
            <summary>
            Updates all the nodes to their new values and sorts the lists
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.ShouldDoX">
            <summary>
            Finds how many collisions there are on the x and y and returns if
            the x axis has the least
            </summary>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Collisions.SelectiveSweepCollider.OnBroadPhaseCollision">
            <summary>
            Fires when a broad phase collision occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.BodyFactory">
            <summary>
            An easy to use factory for creating bodies
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateRectangleBody(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle body.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateRectangleBody(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rectangle body.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateCircleBody(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Single,System.Single)">
            <summary>
            Creates a circle body.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="radius">The radius.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateCircleBody(System.Single,System.Single)">
            <summary>
            Creates a circle body.
            </summary>
            <param name="radius">The radius.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateEllipseBody(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Single,System.Single,System.Single)">
            <summary>
            Creates a ellipse body.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="xRadius">The width.</param>
            <param name="yRadius">The height.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreateEllipseBody(System.Single,System.Single,System.Single)">
            <summary>
            Creates a ellipse body.
            </summary>
            <param name="xRadius">The width.</param>
            <param name="yRadius">The height.</param>
            <param name="mass">The mass.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreatePolygonBody(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single)">
            <summary>
            Creates a Body. The moment of inertia of the body is calculated from the
            set of vertices passed in to this method. The vertices should represent a polygon.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add this body to.</param>
            <param name="vertices">Vertices representing some polygon</param>
            <param name="mass">Mass of the Body</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.BodyFactory.CreatePolygonBody(FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single)">
            <summary>
            Creates a Body. The moment of inertia of the body is calculated from the
            set of vertices passed in to this method. The vertices should represent a polygon.
            </summary>
            <param name="vertices">Vertices representing some polygon</param>
            <param name="mass">Mass of the Body</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleLimitJoint">
            <summary>
            Fixed angle limit joint puts a body at an angle, with an upper and lower angle limit at it's current position.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleLimitJoint.Slop">
            <summary>
            Gets or sets the slop.
            </summary>
            <Value>The slop.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleLimitJoint.UpperLimit">
            <summary>
            Gets or sets the upper limit.
            </summary>
            <Value>The upper limit.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedAngleLimitJoint.LowerLimit">
            <summary>
            Gets or sets the lower limit.
            </summary>
            <Value>The lower limit.</Value>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SAT.Collide(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.ContactList)">
            <summary>
            Returns the contact list from two possibly intersecting Geom's. 
            This is the stationary version of this function. It doesn't 
            account for linear or angular motion.
            </summary>
            <param name="geomA">The first Geom.</param>
            <param name="geomB">The second Geom.</param>
            <param name="contactList">Set of Contacts between the two Geoms.
            NOTE- this will be empty if no contacts are present.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SAT.IntervalDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculate the distance between [minA, maxA] and [minB, maxB]
            The distance will be negative if the intervals overlap
            </summary>
            <param name="minA">The min A.</param>
            <param name="maxA">The max A.</param>
            <param name="minB">The min B.</param>
            <param name="maxB">The max B.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SAT.PolygonCollision(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices)">
            <summary>
            Check if polygon A is going to collide with polygon B.
            The last parameter is the *relative* velocity 
            of the polygons (i.e. velocityA - velocityB)
            </summary>
            <param name="polygonA">The polygon A.</param>
            <param name="polygonB">The polygon B.</param>
            <param name="velocity">The velocity.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.PolygonCollisionResult">
            <summary>
            Structure that stores the results of the PolygonCollision function
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.AABBFluidContainer">
            <summary>
            TODO: Create documentation
            </summary>
        </member>
        <member name="M:Spectrum.Model.EventActions.PathAnimate.SelectNextWaypoint">
            This function needs to be overridden by any subclasses.
            It is called when the animation needs to pick the next target point.
            This behavior will differ depending if we're doing a loop or a linear path 
        </member>
        <member name="P:Spectrum.Model.Level.Id">
            <summary>
            Uniqute identifier for this level
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.Number">
            <summary>
            Number of this level in the sequence of levels
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.Name">
            <summary>
            Displayed name of the level
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.Width">
            <summary>
            Width in pixels of the level. Sizes greater than 1280 will cause the level
            to autmoatically scroll. 
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.Height">
            <summary>
            Height in pixels of the level. Sizes greater than 720 will cause the level
            to automatically scroll.
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.Completed">
            <summary>
            Whether this level has been completed by the player
            </summary>
        </member>
        <member name="P:Spectrum.Model.Level.BackgroundImageName">
            <summary>
            Name of the image file for the background of this image. Do not include file extension.
            By default this value is "levelBG", which will load the default background image.
            Since background images are very large, each color should be placed in its own file.
            Name each file with the same name followed by the color for that image.
            For example, the blue default image is named "levelBGblue", and the red is named "levelBGred".
            Animated background images are allowed. See <see cref="P:Spectrum.Model.Level.BackgroundFrameCount"/> and <see cref="P:Spectrum.Model.Level.BackgroundFrameCount"/>.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a Colors object from a set of flags each representing a color.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.#ctor(System.Int32)">
            <summary>
            Creates a Colors object from a bit string.
            </summary>
            <param name="bitstring">Bit string with length 6. Each bit represents a color. 
            Colors go from MSB to LSB as Purple, Blue, Green, Yellow, Orange, Red.
            Use RawColor to specify colors.</param>
        </member>
        <member name="M:Spectrum.Model.Colors.IndexIn(Spectrum.Model.Colors)">
            <summary>
            Given the set of colors inColors, returns an index of THIS color in that set.
            For instance, if inColors = PGOR, then if THIS color is Orange, returns 2. 
            If THIS color is Red, returns 3.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.ColorsFromJsonArray(System.Collections.ArrayList)">
            <summary>
            Creates a Colors object from an array of named colors.
            </summary>
            <param name="jsonArray">Array of strings with colors being named as:
            "purple", "blue", "green", "yellow", "orange", or "red".</param>
        </member>
        <member name="M:Spectrum.Model.Colors.Equals(Spectrum.Model.Colors)">
            <summary>
            Returns whether two Colors objects are equal.
            Equality means that the two objects represent the exact same set of colors.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.Contains(Spectrum.Model.Colors)">
            <summary>
            Returns whether c is contained in the receiver.
            For example: the player's viewing color is the receiver, 
            and the color of the object tested to be seen is the parameter
            </summary>
            <param name="c">The color to be tested for containment in the reciever</param>
        </member>
        <member name="M:Spectrum.Model.Colors.IsSingularColor">
            <summary>
            Whether this represents just a singular color: purple, blue, green, yellow, orange, or red
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.ColorsByCombiningWith(Spectrum.Model.Colors)">
            <summary>
            Creates a new Colors object by adding all of c's colors to the reciever
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.ColorsByDifferencingWith(Spectrum.Model.Colors)">
            <summary>
            Creates a new Colors object by removing all of c's colors from the reciever
            
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.Combine(Spectrum.Model.Colors)">
            <summary>
            Mutates the reciever to now include all colors in c
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.ForwardColor">
            <summary>
            Returns the next forward color (does not mutate). In terms of the bitstring, this moves from LSB to MSB 1 digit.
            For example, if the reciever is currently red, an orange Colors object will be returned.
            This wraps, so a purple reciever will return a red colors object.
            
            </summary>
            <exception cref="T:System.Exception">Cannot forward a non-singular color</exception>
        </member>
        <member name="M:Spectrum.Model.Colors.BackwardColor">
            <summary>
            Returns the backward color (does not mutate). In terms of the bitstring, this moves from MSB to LSB 1 digit.
            For example, if the reciever is currently purple, a blue Colors object will be returned.
            This wraps, so a red reciever will return a purple colors object.
            
            </summary>
            <exception cref="T:System.Exception">Cannot backward a non-singular color</exception>
        </member>
        <member name="M:Spectrum.Model.Colors.ToString">
            <summary>
            Returns a string representing the color. The first letter of each color in the reciever will
            be returned capitalized. The order is purple, blue, green, yellow, orange, red.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.Count">
            <summary>
            The number of colors in this object.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.SystemColor">
            <summary>
            Returns a system Color object to draw each individual Colors singular color.
            </summary>
        </member>
        <member name="M:Spectrum.Model.Colors.ColorByMixingWith(Spectrum.Model.Colors)">
            <summary>
            Returns a new colors object that is the result of combining the reciever with c.
            If these two colors cannot be returned, returns null.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleJoint">
            <summary>
            Angle joint joins together 2 bodies at an angle
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleJoint.TargetAngle">
            <summary>
            Gets or sets the target angle.
            </summary>
            <Value>The target angle.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleJoint.MaxImpulse">
            <summary>
            Gets or sets the max impulse.
            </summary>
            <Value>The max impulse.</Value>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Debug.DrawingSystem.DrawingHelper.CalculateEllipseBoundary(System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Creates a description of an ellipse by returning a number of points on it's boundary.
            </summary>
            <param name="width">Width of the ellipse.</param>
            <param name="height">Height of the ellipse.</param>
            <param name="center">Center of the ellipse.</param>
            <param name="count">Number of points to be calculated.</param>
            <returns>A number of points that are on the boundary of the ellipse.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Debug.DrawingSystem.DrawingHelper.ApproximateClosestPointOnEllipse(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Finds the closest point on a given ellipse to a given point.
            </summary>
            <param name="point">Position to which the point on the ellipse should be closest to.</param>
            <param name="ellipseBoundary">Description of the ellipse.</param>
            <returns>Point on ellipse boundary that is the closest to point</returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Pool`1">
            <summary>
            Pool used to cache objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Debug.PhysicsSimulatorView">
            <summary>
            Draws the elements inside a <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/>. Great for debugging physics related problems.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.GenericList`1.RemoveDisposed">
            <summary>
            Removes the disposed items
            It determines if it is disposed by checking the
            IsDisposed property on the item.
            </summary>
            <returns>The number of items that was removed</returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint">
            <summary>
            A pin joint works like 2 revolute joints with a fixed distance between them.
            Essentially it places 2 bodies at a fixed distance from each other.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.Body1">
            <summary>
            Gets or sets the first body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.TargetDistance">
            <summary>
            Gets or sets the target distance.
            </summary>
            <Value>The target distance.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.Anchor1">
            <summary>
            Gets or sets the fist anchor.
            </summary>
            <Value>The anchor1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.Anchor2">
            <summary>
            Gets or sets the second anchor.
            </summary>
            <Value>The anchor2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.WorldAnchor1">
            <summary>
            Gets the first world anchor.
            </summary>
            <Value>The world anchor1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.PinJoint.WorldAnchor2">
            <summary>
            Gets the second world anchor.
            </summary>
            <Value>The world anchor2.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint">
            <summary>
            Angle limit joint joins together 2 bodies at an upper and lower angel limit.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint.Body1">
            <summary>
            Gets or sets the first body
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint.Slop">
            <summary>
            Gets or sets the slop.
            </summary>
            <Value>The slop.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint.UpperLimit">
            <summary>
            Gets or sets the upper limit.
            </summary>
            <Value>The upper limit.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.AngleLimitJoint.LowerLimit">
            <summary>
            Gets or sets the lower limit.
            </summary>
            <Value>The lower limit.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.InactivityController">
            <summary>
            Can be used to add support for resting bodies.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Controllers.InactivityController.ActivationDistance">
            <summary>
            Returns or sets the distance in which deactivated bodies can be reactivated by an active body
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Controllers.InactivityController.MaxIdleTime">
            <summary>
            Returns or sets the idle time in ms before a body will be deactivated
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.InactivityController.BodiesEnabled">
            <summary>
            Returns the number of active bodies before updating
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Feature">
            <summary>
            Contains info about distance, normal and position.
            Used internal in collision detection.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Feature.Equals(FarseerGames.FarseerPhysics.Collisions.Feature)">
            <summary>
            Checks against another Features to see if they are equal.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.ArbiterList">
            <summary>
            Provides an implementation of a strongly typed List with Arbiter
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.ControllerList">
            <summary>
            Provides an implementation of a strongly typed List with Controller
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.ControllerList.Add(FarseerGames.FarseerPhysics.Controllers.Controller)">
            <summary>
            Adds the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.ControllerList.Remove(FarseerGames.FarseerPhysics.Controllers.Controller)">
            <summary>
            Removes the specified controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.ControllerList.RemoveDisposed">
            <summary>
            Removes the disposed controllers.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.ContactList">
            <summary>
            Provides an implementation of a strongly typed List with Contact
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.ContactList.IndexOfSafe(FarseerGames.FarseerPhysics.Collisions.Contact)">
            <summary>
            A safe way of getting an index
            </summary>
            <param name="contact">The contact.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Springs.SpringList">
            <summary>
            Provides an implementation of a strongly typed List with Spring
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint">
            <summary>
            Creates a revolute joint between 2 bodies.
            Can be used as wheels on a car.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.SetInitialAnchor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the initial anchor.
            </summary>
            <param name="initialAnchor">The initial anchor.</param>
            <exception cref="T:System.ArgumentNullException"><c>_body1</c> is null.</exception>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.PreStep(System.Single)">
            <summary>
            Calculates all the work needed before updating the joint.
            </summary>
            <param name="inverseDt">The inverse dt.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.Body1">
            <summary>
            Gets or sets the first body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.Anchor">
            <summary>
            Gets or sets the anchor.
            </summary>
            <Value>The anchor.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.RevoluteJoint.CurrentAnchor">
            <summary>
            This gives the anchor position after the simulation starts
            </summary>
            <Value>The current anchor.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint">
            <summary>
            Fixed revolute joint creates a revolute joint at the anchor.
            Fixed revolute joint pins the body to a fixed position, and makes sure that it can rotate, but not move.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint.SetAnchor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the anchor.
            </summary>
            <param name="anchor">The anchor.</param>
            <exception cref="T:System.ArgumentNullException"><c>_body</c> is null.</exception>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <Value>The body.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint.MaxImpulse">
            <summary>
            Gets or sets the max impulse.
            </summary>
            <Value>The max impulse.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.FixedRevoluteJoint.Anchor">
            <summary>
            Gets or sets the anchor.
            </summary>
            <Value>The anchor.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider">
            <summary>
            This class is used to isolate the AABB pairs that are currently in a collision
            state without having to check all pair combinations. It relies heavily on frame
            coherence or the idea that objects will typically be near their last position
            from frame to frame. The class caches the various state information and doesn't
            update it unless an extent on an axis "swaps" positions with its neighbor.
            Note: If your application has "teleporting" objects or objects that are 
            extremely high-speed in relation to other objects, then this Sweep and Prune
            method may breakdown.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPairs">
            <summary>
            The collision pairs
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ProcessDisposedGeoms">
            <summary>
            Used by the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to remove geometry from Sweep and Prune once it
            has been disposed.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ProcessRemovedGeoms">
            <summary>
            Used by the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to remove geometry from Sweep and Prune once it
            has been removed.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.Add(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            This method is used by the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to notify Sweep and Prune that 
            new geometry is to be tracked.
            </summary>
            <param name="geom">The geometry to be added</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.Update">
            <summary>
            Incrementally updates the system. Assumes relatively good frame coherence.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.UpdateExtentValues">
            <summary>
            Updates the values in the x and y extent lists by the changing AABB values.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.HandleCollisions">
            <summary>
            Iterates over the collision pairs and creates arbiters.
            </summary>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.OnBroadPhaseCollision">
            <summary>
            Fires when a broad phase collision occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPair">
            <summary>
            Houses collision pairs as geom1 and geom2. The pairs are always ordered such
            that the lower id geometry is first. This allows the <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPairDictionary"/>
            to have a consistent key / hash code for a pair of geometry.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPair.Equals(FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPair)">
            <summary>
            Checks to see if the specified <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPair"/> equals this instance
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPairDictionary">
            <summary>
            This class is used to keep track of the pairs of geometry that need to be
            passed on to the narrow phase. The keys stored in the dictionary are
            the actual geometry pairs (the boolean Value is currently unused).
            NOTE: May eventually want to add OnEnterCollisionState / 
            OnExitCollisionState callbacks which might be useful for debugging
            or possibly in user applications.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPairDictionary.RemovePair(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Remove a pair of geoms
            </summary>
            <param name="g1"></param>
            <param name="g2"></param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPairDictionary.AddPair(FarseerGames.FarseerPhysics.Collisions.Geom,FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Adds the a pair of geoms.
            </summary>
            <param name="g1">The g1.</param>
            <param name="g2">The g2.</param>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.Extent">
            <summary>
            This class represents a single extent of an AABB on a single axis. It has a
            reference to <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentInfo"/> which has information about the geometry it belongs
            to.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentInfo">
            <summary>
            This class contains represents additional extent info for a particular axis
            It has a reference to the geometry whose extents are being tracked. It
            also has a min and max extent reference into the <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList"/> itself.
            The class keeps track of overlaps with other geometries.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentInfoList">
            <summary>
            This class keeps a list of information that relates extents to geometries.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList">
            <summary>
            Represents a lists of extents for a given axis. This list will be kept
            sorted incrementally.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList.InsertIntoSortedList(FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.Extent)">
            <summary>
            Inserts a new Extent into the already sorted list. As the <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList"/>
            class is currently derived from the generic List class, insertions
            of new geometry (and extents) are going to be somewhat slow right
            off the bat. Additionally, this function currently performs 
            linear insertion. Two big optimizations in the future would be to
            (1) make this function perform a binary search and (2) allow for
            a "hint" of what index to start with. The reason for this is because
            there is always a min and max extents that need inserting and we
            know the max extent is always after the min extent.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList.IncrementalInsertExtent(FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentInfo)">
            <summary>
            Incrementally inserts the min/max extents into the <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList"/>. As it
            does so, the method ensures that overlap records, the <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.CollisionPair"/>
            map, and all other book-keeping is up to date.
            </summary>
            <param name="ourInfo">The extent info for a give axis</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList.IncrementalSort">
            <summary>
            Incrementally sorts <see cref="T:FarseerGames.FarseerPhysics.Collisions.SweepAndPruneCollider.ExtentList"/>. It is assumed that there is a high level
            of frame coherence and that much of the list is already fairly well
            sorted. This algorithm makes use of "insert sort" which is notoriously
            slow - except for when a list is already almost sorted - which is the
            case when there is high frame coherence.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.JointList">
            <summary>
            Provides an implementation of a strongly typed List with Joint
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Contact">
            <summary>
            Used internal in collision detection.
            Represents a contact point between 2 geoms.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Contact.ContactId">
            <summary>
            Id of the contact
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Contact.Position">
            <summary>
            Position of the contact
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Contact.Normal">
            <summary>
            Normal of the contact
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Contact.Separation">
            <summary>
            The amount of penetration
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:FarseerGames.FarseerPhysics.Dynamics.Body" -->
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.AngularVelocity">
            <summary>
            The rate at which a body is rotating 
            </summary>
            <Value>The angular velocity.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.Enabled">
             <summary>
            Sets whether or not the body will take part in the simulation.
             If not enabled, the body will remain in the internal list of bodies but it will not be updated.
             </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.IgnoreGravity">
            <summary>
            Gets or sets a Value indicating whether this body ignores gravity.
            </summary>
            <Value><c>true</c> if it ignores gravity; otherwise, <c>false</c>.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.IsQuadraticDragEnabled">
            <summary>
            Gets or sets a Value indicating whether this body is quadratic drag enabled.
            </summary>
            <Value>
            	<c>true</c> if this body is quadratic drag enabled; otherwise, <c>false</c>.
            </Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.LinearDragCoefficient">
            <summary>
            The linear drag coefficient is the amount of drag a body has.
            Linear drag is the drag applied when the body travels in a straight line.
            Default is 0.001f - tuned for a body of mass 1
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.LinearVelocity">
            <summary>
            Gets or sets the linear velocity.
            </summary>
            <Value>The linear velocity.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.QuadraticDragCoefficient">
            <summary>
            Gets or sets the quadratic drag coefficient.
            </summary>
            <Value>The quadratic drag coefficient.</Value>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.RotationalDragCoefficient">
            <summary>
            Gets or sets the rotational drag coefficient.
            </summary>
            <Value>The rotational drag coefficient.</Value>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.#ctor(FarseerGames.FarseerPhysics.Dynamics.Body)">
            <summary>
            Body constructor that makes a copy of another body
            </summary>
            <param name="body"></param>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.IdleTime">
            <summary>
            Returns or sets how long (ms) the body is below the <see cref="F:FarseerGames.FarseerPhysics.Dynamics.Body.MinimumVelocity"/>.
            If this time is greater than the InactivityControllers "MaxIdleTime", it will be deactivated
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.IsAutoIdle">
            <summary>
            Returns or sets whether the body can be deactivated by the <see cref="T:FarseerGames.FarseerPhysics.Controllers.InactivityController"/> or not
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Dynamics.Body.MinimumVelocity">
            <summary>
            Returns or sets the minimum velocity. If the body's velocity is below this Value, it can
            be deactivated
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ResetDynamics">
            <summary>
            This method will reset position and motion properties. This method is useful
            when creating pools of re-usable bodies. It could be used when releasing bodies
            back into the pool.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetBodyMatrix">
            <summary>
            Gets the body matrix.
            It's a combination of the translation and rotation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetBodyMatrix(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the body matrix.
            It's a combination of the translation and rotation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetBodyRotationMatrix">
            <summary>
            Gets the body rotation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetBodyRotationMatrix(Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the body rotation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetWorldPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the body's position in world coordinates from local coordinates.
            </summary>
            <param name="localPosition">The local position of the body</param>
            <returns>The world position of the body</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetWorldPosition(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the body's position in world coordinates from local coordinates.
            </summary>
            <param name="localPosition">The local position of the body</param>
            <param name="worldPosition">The world position.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetLocalPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the body's position in local coordinates from world coordinates.
            </summary>
            <param name="worldPosition">The world position of the body</param>
            <returns>The local position of the body</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetLocalPosition(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the body's position in local coordinates from world coordinates.
            </summary>
            <param name="worldPosition">The world position of the body</param>
            <param name="localPosition">The local position.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetVelocityAtLocalPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Gets the velocity at a local point.
            </summary>
            <param name="localPoint">The local point.</param>
            <returns>The velocity at the point</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetVelocityAtLocalPoint(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the velocity at a local point.
            </summary>
            <param name="localPoint">The local point.</param>
            <param name="velocity">The velocity.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetVelocityAtWorldPoint(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the velocity at a world point.
            </summary>
            <param name="worldPoint">The world point.</param>
            <param name="velocity">The velocity.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetVelocityAtWorldOffset(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the velocity at world offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="velocity">The velocity.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.GetVelocityBiasAtWorldOffset(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the velocity bias at world offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="velocityBias">The velocity bias.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForce(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Adds force to the body.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForce(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Applies a force to the body.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForceAtLocalPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Applies force at a local point.
            </summary>
            <param name="amount">The amount.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForceAtLocalPoint(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Applies force at a local point.
            </summary>
            <param name="amount">The amount.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForceAtWorldPoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Applies force at a world point.
            </summary>
            <param name="amount">The amount.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyForceAtWorldPoint(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Applies force at a world point.
            </summary>
            <param name="amount">The amount.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ClearForce">
            <summary>
            Clears the force of the body.
            This method gets called after each update.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyTorque(System.Single)">
            <summary>
            Adds a torque to the body.
            </summary>
            <param name="torque">The torque.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ClearTorque">
            <summary>
            Clears the torque of the body.
            This method gets called after each update.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyImpulse(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Stores all applied impulses so that they can be applied at the same time
            by the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyImpulse(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Stores all applied impulses so that they can be applied at the same time
            by the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/>.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyImpulses">
            <summary>
            Applies then clears all the external impulses that were accumulated
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyImmediateImpulse(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            used internally only by the joints and arbiter.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ClearImpulse">
            <summary>
            Clears the impulse of the body.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyAngularImpulse(System.Single)">
            <summary>
            Applies angular impulse.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyAngularImpulse(System.Single@)">
            <summary>
            Applies angular impulse.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.IntegrateVelocity(System.Single)">
            <summary>
            Use internally by the engine to integrate the velocity.
            </summary>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.IntegratePosition(System.Single)">
            <summary>
            Use internally by the engine to integrate the position.
            </summary>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyImpulseAtWorldOffset(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Applies a impulse at the specified world offset.
            </summary>
            <param name="amount">The amount.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Body.ApplyBiasImpulseAtWorldOffset(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Applies a bias impulse at the specified world offset.
            </summary>
            <param name="impulseBias">The impulse bias.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Dynamics.Body.Disposed">
            <summary>
            Fires when body gets disposed
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Moves">
            <summary>
            Returns whether the body is below the minimum velocity or not
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Mass">
            <summary>
            The mass of the Body
            </summary>
            <exception cref="T:System.ArgumentException">Mass cannot be 0</exception>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.InverseMass">
            <summary>
            The inverse of the mass of the body (1/Mass)
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.MomentOfInertia">
            <summary>
            The moment of inertia of the body. 
            <para>The moment of inertia of a body in 2D is a scalar Value that represents how
            difficult (or not difficult) it is to rotate a body about the center of mass.</para>
            <para>The moment of inertia varies by the shape of the body. For basic shapes like
            circles and rectangles, formulas exist for computing the moment of inertia based on
            the shape properties (radius of the circle, or length and width of the rectangle)</para>
            <para>For bodies that are not basic, it is usually good enough to estimate the moment of
            inertia by picking a basic shape that is close to the same shape. It is also possible
            using more advance calculus techniques to compute the actual moment of inertia of 
            non-basic shapes.</para>
            The <see cref="T:FarseerGames.FarseerPhysics.Collisions.Vertices"/> class has the ability of calculating the MOI (Moment of Inertia) from a polygon shape.
            </summary>
            <exception cref="T:System.ArgumentException">Moment of inertia cannot be 0 or less</exception>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.InverseMomentOfInertia">
            <summary>
            The inverse of the moment of inertia of the body (1/<see cref="P:FarseerGames.FarseerPhysics.Dynamics.Body.MomentOfInertia"/>)
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.IsStatic">
            <summary>
            Indicates this body is fixed within the world and will not move no matter what forces are applied.
            <para>Bodies that represent land or world borders are a good examples of static bodies.</para>
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <Value>The position.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Revolutions">
            <summary>
            Gets the revolutions relative to the original state of the body
            </summary>
            <Value>The revolutions.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <Value>The rotation.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.TotalRotation">
            <summary>
            Returns the total rotation of a body.
            If a body spins around 10 times then TotalRotation wold return 2 * Pi * 10.
            This property is mostly intended for internal use by the angle joints and springs but it could be useful in some situations for game related things.
            This property is read-only 
            </summary>
            <Value>The total rotation.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Force">
            <summary>
            The total amount of force that will be applied to the body in the upcoming loop.
            The force is cleared at the end of every update call, so this Value should only be called just prior to calling update.
            This property is read-only. 
            </summary>
            <Value>The force.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.Torque">
            <summary>
            The total amount of torque that will be applied to the body in the upcoming loop.
            The Torque is cleared at the end of every update call, so this Value should only be called just prior to calling update.
            Torque can be thought of as the rotational analog of a force.
            This property is read-only. 
            </summary>
            <Value>The torque.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.XVectorInWorldCoordinates">
            <summary>
            Returns a unit vector that represents the local X direction of a body converted to world coordinates.
            This property is read-only 
            </summary>
            <Value>The X vector in world coordinates.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Body.YVectorInWorldCoordinates">
            <summary>
            Returns a unit vector that represents the local Y direction of a body converted to world coordinates.
            This property is read-only 
            </summary>
            <Value>The Y vector in world coordinates.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.FluidDragController">
            <summary>
            FluidDragController applies fluid physics to the bodies within it.  Things like fluid drag and fluid density
            can be adjusted to give semi-realistic motion for bodies in fluid.
            
            The FluidDragController does nothing to define or control the MOTION of the fluid itself. It simply knows
            how to apply fluid forces to the bodies it contains.
            
            In order for the FluidDragController to know when to apply forces and when not to apply forces, it needs to know
            when a body enters it.  This is done by supplying the FluidDragController with an <see cref="T:FarseerGames.FarseerPhysics.Interfaces.IFluidContainer"/> object.
            
            <see cref="T:FarseerGames.FarseerPhysics.Interfaces.IFluidContainer"/> has two simple methods that need to be implemented. Intersect(AABB aabb), returns true if a given
            AABB object intersects it, false otherwise.  Contains(ref Vector2 vector) returns true if a given point is inside the 
            fluid container, false otherwise.
            
            For a very simple example of a very simple fluid container. See the <see cref="T:FarseerGames.FarseerPhysics.Controllers.AABBFluidContainer"/>.  This represents a fluid container
            in the shape of an AABB.
            
            More complex fluid containers are where things get interesting.  The <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/> object is an example of a complex
            fluid container.  The <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/> simulates wave motion. It's driven by an algorithm (not physics) which dynamically 
            alters a polygonal shape to mimic waves.  Where it gets interesting is the <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/> also implements <see cref="T:FarseerGames.FarseerPhysics.Interfaces.IFluidContainer"/>. This allows 
            it to be used in conjunction with the FluidDragController.  Anything that falls into the dynamically changing fluid container
            defined by the <see cref="T:FarseerGames.FarseerPhysics.Controllers.WaveController"/> will have fluid physics applied to it.
            
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.Initialize(FarseerGames.FarseerPhysics.Interfaces.IFluidContainer,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes the fluid drag controller
            </summary>
            <param name="fluidContainer">An object that implements <see cref="T:FarseerGames.FarseerPhysics.Interfaces.IFluidContainer"/></param>
            <param name="density">Density of the fluid</param>
            <param name="linearDragCoefficient">Linear drag coefficient of the fluid</param>
            <param name="rotationalDragCoefficient">Rotational drag coefficient of the fluid</param>
            <param name="gravity">The direction gravity acts. Buoyancy force will act in opposite direction of gravity.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.AddGeom(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Add a geom to be controlled by the fluid drag controller.  The geom does not need to already be in
            the fluid to add it to the controller. By calling this method you are telling the fluid drag controller
            to watch this geom and it if enters my fluid container, apply the fluid physics.
            </summary>
            <param name="geom">The geom to be added.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.RemoveGeom(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Removes a geometry from the fluid drag controller.
            </summary>
            <param name="geom">The geom.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.Reset">
            <summary>
            Resets the fluid drag controller
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.FindVerticesInFluid(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Finds what vertices of the geometry that is inside the fluidcontainer
            </summary>
            <param name="geom">The geometry to check against</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.FluidDragController.CalculateDrag(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
            Calculates the linear and rotational drag of the geometry
            </summary>
            <param name="geom">The geometry</param>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.FluidDragController.Density">
            <summary>
            Density of the fluid.  Higher values will make things more buoyant, lower values will cause things to sink.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.FluidDragController.LinearDragCoefficient">
            <summary>
            Controls the linear drag that the fluid exerts on the bodies within it.  Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.FluidDragController.RotationalDragCoefficient">
            <summary>
            Controls the rotational drag that the fluid exerts on the bodies within it. Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids. 
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.PhysicsSimulator">
            <summary>
            Keeps track of bodies, geometries, joints, springs, controllers and other dynamics.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.NarrowPhaseCollider">
            <summary>
            Get or set the current narrow phase collider.
            You can set it to:
            NarrowPhaseCollider.DistanceGrid
            or
            NarrowPhaseCollider.SAT
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.Enabled">
            <summary>
            If false, the whole simulation stops. It still processes added and removed geometries.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.MaxContactsToDetect">
            <summary>
            The maximum number of contacts to detect in the narrow phase.
            Default is 10.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.MaxContactsToResolve">
            <summary>
            The maximum number of contacts to resolve in the narrow phase.
            Default is 4.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.FrictionType">
            <summary>
            The type of friction.
            Default is FrictionType.Average.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.AllowedPenetration">
            <summary>
            The amount of allowed penetration
            Default is .05
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.Gravity">
            <summary>
            Gravity applied to all bodies.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.Iterations">
            <summary>
            The number of iterations the engine should do when applying forces.
            Incease this number to have a more stable simulation.
            Increasing this will affect performance.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.PhysicsSimulator.EnableDiagnostics">
            <summary>
            If true, the physics engine will gather info about how
            long different parts of the engine takes to run
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> class.
            Gravity is set to zero.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> class.
            </summary>
            <param name="gravity">The gravity.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.Clear">
            <summary>
            Resets the physics simulator back to it's original state. Only gravity is persisted.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ProcessAddedAndRemoved">
            <summary>
            Add new bodies and geometries to the engine without doing an update.
            Also removes bodies and geometries. If there is any disposed items, those will get
            removed too.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.Update(System.Single,System.Single)">
            <summary>
            Updates the physics simulator with the specified time change.
            </summary>
            <param name="dt">The delta time.</param>
            <param name="dtReal">The real delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.Collide(System.Single,System.Single)">
            <summary>
            Checks if the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> geoms collide with the specified X and Y coordinates.
            </summary>
            <param name="x">The x value</param>
            <param name="y">The y value</param>
            <returns>The first geom that collides with the specified x and y coordinates</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.Collide(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if the <see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> geoms collide with the specified point.
            </summary>
            <param name="point">The point to check against.</param>
            <returns>The first geom that collides with the specified point</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.CollideAll(System.Single,System.Single)">
            <summary>
            Finds all geoms that collides with the specified X and Y coordinates
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A list of geoms that collided with the X and Y values</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.CollideAll(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds all geoms that collides with the specified point
            </summary>
            <param name="point">The point to check against.</param>
            <returns>A list of geoms that collided with the point</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.DoBroadPhaseCollision">
            <summary>
            Does the broad phase collision detection.
            The broad phase is responsible for finding geometries that are in close
            vicinity (collideable) to each other.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.DoNarrowPhaseCollision">
            <summary>
            Does the narrow phase collision detection.
            The narrow phase checks collisionpairs found in the broad phase in detail.
            This phase creates contacts between geometries and then applies impulse to them.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ApplyForces(System.Single,System.Single)">
            <summary>
            Applies the forces to all controllers, springs, joints and bodies.
            This step also
            </summary>
            <param name="dt">The delta time.</param>
            <param name="dtReal">The real delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ApplyImpulses(System.Single)">
            <summary>
            Applies the impulses to all joints and arbiters.
            </summary>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.UpdatePositions(System.Single)">
            <summary>
            Updates the position on all bodies.
            </summary>
            <param name="dt">The delta time.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ProcessAddedItems">
            <summary>
            Processes the added geometries, springs, joints, bodies and controllers.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ProcessRemovedItems">
            <summary>
            Processes the removed geometries (and their arbiters), bodies, controllers, joints and springs.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.PhysicsSimulator.ProcessDisposedItems">
            <summary>
            Processes the disposed controllers, joints, springs, bodies and cleans up the arbiter list.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.PhysicsSimulator.BroadPhaseCollider">
            <summary>
            Gets or sets the broad phase collider.
            Make sure that the engine does not contain any geoms when setting the broad phase collider.
            </summary>
            <value>The current broad phase collider.</value>
            <exception cref="T:System.Exception">The <see cref="P:FarseerGames.FarseerPhysics.PhysicsSimulator.GeomList"/> must be empty when setting the broad phase collider type</exception>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.SetInitialAnchor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets the initial anchor.
            </summary>
            <param name="initialAnchor">The initial anchor.</param>
            <exception cref="T:System.ArgumentNullException"><c>_body1</c> is null.</exception>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.Body1">
            <summary>
            Gets or sets the fist body.
            </summary>
            <Value>The body1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.Body2">
            <summary>
            Gets or sets the second body.
            </summary>
            <Value>The body2.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.MaxImpulse">
            <summary>
            Gets or sets the max impulse.
            </summary>
            <Value>The max impulse.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.Anchor">
            <summary>
            Gets or sets the anchor.
            </summary>
            <Value>The anchor.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Dynamics.Joints.WeldJoint.CurrentAnchor">
            <summary>
            This gives the anchor position after the simulation starts
            </summary>
            <Value>The current anchor.</Value>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Vertices">
            <summary>
            Provides an implementation of a strongly typed List with Vector2
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetVerticesArray">
            <summary>
            Gets an array of vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.NextIndex(System.Int32)">
            <summary>
            Gets the next index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.PreviousIndex(System.Int32)">
            <summary>
            Gets the previous index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdge(System.Int32)">
            <summary>
            Gets the edge.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdge(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the edge.
            </summary>
            <param name="index">The index.</param>
            <param name="edge">The edge.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdgeMidPoint(System.Int32)">
            <summary>
            Gets the edge mid point.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdgeMidPoint(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the edge mid point.
            </summary>
            <param name="index">The index.</param>
            <param name="midPoint">The mid point.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdgeNormal(System.Int32)">
            <summary>
            Gets the edge normal.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetEdgeNormal(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the edge normal.
            </summary>
            <param name="index">The index.</param>
            <param name="edgeNormal">The edge normal.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetVertexNormal(System.Int32)">
            <summary>
            Gets the vertex normal.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetVertexNormal(System.Int32,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the vertex normal.
            </summary>
            <param name="index">The index.</param>
            <param name="vertexNormal">The vertex normal.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetShortestEdge">
            <summary>
            Finds the shortest edge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.SubDivideEdges(System.Single)">
            <summary>
            Divides the edges up into the specified length.
            </summary>
            <param name="maxEdgeLength">Length of the max edge.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.ForceCounterClockWiseOrder">
            <summary>
            Forces counter clock wise order.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetSignedArea">
            <summary>
            Gets the signed area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetArea">
            <summary>
            Gets the area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetCentroid">
            <summary>
            Gets the centroid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetCentroid(System.Single)">
            <summary>
            Gets the centroid.
            </summary>
            <param name="area">The area.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetMomentOfInertia">
            <summary>
            Gets the moment of inertia from the vertices
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Can't calculate MOI on zero vertices</exception>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.ProjectToAxis(Microsoft.Xna.Framework.Vector2@,System.Single@,System.Single@)">
            <summary>
            Projects to axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Translate(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Translates the vertices with the specified vector.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Scale(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Scales the vertices with the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Rotate(System.Single)">
            <summary>
            Rotate the vertices with the defined value in radians.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.IsConvex">
            <summary>
            Determines whether this instance is convex.
            </summary>
            <returns>
            	<c>true</c> if this instance is convex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateRectangle(System.Single,System.Single)">
            <summary>
            Creates a rectangle with the specified width and height
            with automatic subdivsion.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The vertices that define a rectangle</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateSimpleRectangle(System.Single,System.Single)">
            <summary>
            Creates a rectangle with the specified width and height
            with no subdivision.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The vertices that define a rectangle</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateCircle(System.Single,System.Int32)">
            <summary>
            Creates a circle with the specified radius and number of edges.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles a circle</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateEllipse(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ellipse with the specified width, height and number of edges.
            </summary>
            <param name="xRadius">Width of the ellipse.</param>
            <param name="yRadius">Height of the ellipse.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles an ellipse</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateGear(System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a gear shape with the specified radius and number of teeth.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfTeeth">The number of teeth.</param>
            <param name="tipPercentage">The tip percentage.</param>
            <param name="toothHeight">Height of the tooth.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.FindMidpoint(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds the mid-point of two Vector2.
            </summary>
            <param name="firstVector">First Vector2.</param>
            <param name="secondVector">Other Vector2.</param>
            <returns>Mid-point Vector2.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.FindEdgeNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds the normal from two vectors
            </summary>
            <param name="first">The first vector</param>
            <param name="second">The second vector</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.FindNormalAngle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Finds the angle of the vector.
            </summary>
            <returns>Angle of the vector.</returns>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Collisions.Vertices._closePixels">
            <summary>
            TODO:
            1.) Das Array welches ich bekomme am besten in einen bool array verwandeln. Würde die Geschwindigkeit verbessern
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreatePolygon(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Creates vertices from the texture data.
            </summary>
            <param name="data">The data.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreatePolygon(System.UInt32[],System.Int32,System.Int32,System.Single,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Creates a list of vertices from the texture data.
            </summary>
            <param name="data">The data.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="hullTolerance">The hull tolerance. This argument controls the amount of details found in the detection.</param>
            <param name="alphaTolerance">The alpha tolerance.</param>
            <param name="multiPartDetection">if set to <c>true</c> [multi part detection].</param>
            <param name="holeDetection">if set to <c>true</c> [hole detection].</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreatePolygon(FarseerGames.FarseerPhysics.Collisions.PolygonCreationAssistance@)">
            <summary>
            Creates a list of vertices. Create a PolygonCreationAssistance that contains all the data needed for detection.
            </summary>
            <param name="pca">The pca.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Union(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.PolyUnionError@)">
            <summary>
            Merges two polygons, given that they intersect.
            </summary>
            <param name="polygon1">The first polygon.</param>
            <param name="polygon2">The second polygon.</param>
            <param name="error">The error returned from union</param>
            <returns>The union of the two polygons, or null if there was an error.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Subtract(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.PolyUnionError@)">
            <summary>
            Subtracts one polygon from another.
            </summary>
            <param name="polygon1">The base polygon.</param>
            <param name="polygon2">The polygon to subtract from the base.</param>
            <param name="error">The error.</param>
            <returns>
            The result of the polygon subtraction, or null if there was an error.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Intersect(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.PolyUnionError@)">
            <summary>
            Finds the intersection between two polygons.
            </summary>
            <param name="polygon1">The first polygon.</param>
            <param name="polygon2">The second polygon.</param>
            <param name="error">The error.</param>
            <returns>
            The intersection of the two polygons, or null if there was an error.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.PreparePolygons(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices@,FarseerGames.FarseerPhysics.Collisions.Vertices@,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Collisions.EdgeIntersectInfo}@,FarseerGames.FarseerPhysics.Collisions.PolyUnionError@)">
            <summary>
            Prepares the polygons.
            </summary>
            <param name="polygon1">The polygon1.</param>
            <param name="polygon2">The polygon2.</param>
            <param name="poly1">The poly1.</param>
            <param name="poly2">The poly2.</param>
            <param name="intersections">The intersections.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.VerticesIntersect(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Collisions.EdgeIntersectInfo}@)">
            <summary>
            Check and return polygon intersections
            </summary>
            <param name="polygon1"></param>
            <param name="polygon2"></param>
            <param name="intersections"></param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.PointInPolygonAngle(Microsoft.Xna.Framework.Vector2,FarseerGames.FarseerPhysics.Collisions.Vertices)">
            <summary>
            * ref: http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2 
            * Compute the sum of the angles made between the test point and each pair of points making up the polygon. 
            * If this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. 
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.VectorAngle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Return the angle between two vectors on a plane
            The angle is from vector 1 to vector 2, positive anticlockwise
            The result is between -pi -> pi
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Round(FarseerGames.FarseerPhysics.Collisions.Vertices)">
            <summary>
            Rounds vertices X and Y values to whole numbers.
            </summary>
            <param name="polygon">The polygon whose vertices should be rounded.</param>
            <returns>A new polygon with rounded vertices.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.VerticesAreCollinear(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="p1">Vertex 1</param>
            <param name="p2">Vertex 2</param>
            <param name="p3">Vertex 3</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Simplify(FarseerGames.FarseerPhysics.Collisions.Vertices,System.Int32)">
            <summary>
            Simple polygon simplification.
            </summary>
            <param name="polygon">The polygon that needs simplification.</param>
            <param name="bias">The distance bias (in pixels) between points. Points closer than this will be 'joined'.</param>
            <returns>A simplified polygon.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Simplify(FarseerGames.FarseerPhysics.Collisions.Vertices)">
            <summary>
            Simple polygon simplification.
            </summary>
            <param name="polygon">The polygon that needs simplification.</param>
            <returns>A simplified polygon.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
            Creates an capsule with the specified height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + 2 * radius) of the capsule.</param>
            <param name="endRadius">Radius of the capsule ends.</param>
            <param name="edges">The number of edges of the capsule ends. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CreateCapsule(System.Single,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates an capsule with the specified  height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + radii) of the capsule.</param>
            <param name="topRadius">Radius of the top.</param>
            <param name="topEdges">The number of edges of the top. The more edges, the more it resembles an capsule</param>
            <param name="bottomRadius">Radius of bottom.</param>
            <param name="bottomEdges">The number of edges of the bottom. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.Triangulate(Microsoft.Xna.Framework.Vector2[],FarseerGames.FarseerPhysics.Collisions.Vertices.WindingOrder,Microsoft.Xna.Framework.Vector2[]@,System.Int16[]@)">
            <summary>
            Triangulates a 2D polygon produced the indexes required to render the points as a triangle list.
            </summary>
            <param name="inputVertices">The polygon vertices in counter-clockwise winding order.</param>
            <param name="desiredWindingOrder">The desired output winding order.</param>
            <param name="outputVertices">The resulting vertices that include any reversals of winding order and holes.</param>
            <param name="indices">The resulting indices for rendering the shape as a triangle list.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.CutHoleInShape(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Cuts a hole into a shape.
            </summary>
            <param name="shapeVerts">An array of vertices for the primary shape.</param>
            <param name="holeVerts">An array of vertices for the hole to be cut. It is assumed that these vertices lie completely within the shape verts.</param>
            <returns>The new array of vertices that can be passed to Triangulate to properly triangulate the shape with the hole.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.EnsureWindingOrder(Microsoft.Xna.Framework.Vector2[],FarseerGames.FarseerPhysics.Collisions.Vertices.WindingOrder)">
            <summary>
            Ensures that a set of vertices are wound in a particular order, reversing them if necessary.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <param name="windingOrder">The desired winding order.</param>
            <returns>A new set of vertices if the winding order didn't match; otherwise the original set.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.ReverseWindingOrder(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Reverses the winding order for a set of vertices.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <returns>The new vertices for the polygon with the opposite winding order.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.DetermineWindingOrder(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Determines the winding order of a polygon given a set of vertices.
            </summary>
            <param name="vertices">The vertices of the polygon.</param>
            <returns>The calculated winding order of the polygon.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.DecomposeGeom(FarseerGames.FarseerPhysics.Collisions.Vertices,FarseerGames.FarseerPhysics.Dynamics.Body,System.Int32)">
            <summary>
            Decomposes a set of vertices into a set of Geoms all
            attached to one body.
            </summary>
            <param name="vertices">Vertices to decompose.</param>
            <param name="body">Body to attach too.</param>
            <param name="maxPolysToFind">Maximum Geoms to return.</param>
            <returns>A list of Geoms.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.GetConvexHull">
            <summary>
            Creates a convex hull of the Vertices. Note: Vertices must 
            be of a simple polygon, i.e. edges do not overlap.
            </summary>
            <remarks>
            Implemented using Melkman's Convex Hull Algorithm - O(n) time complexity.
            Reference: http://www.ams.sunysb.edu/~jsbm/courses/345/melkman.pdf
            Requires that vertices are of a simple polygon. Handles collinear points.
            </remarks>
            <returns>A convex hull in counterclockwise winding order.</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.IsLeft(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <remarks>Used by method <c>GetConvexHull()</c>.</remarks>
            <returns>Positive number if points arc left, negative if points arc right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Vertices.Triangle">
            <summary>
            A basic triangle structure that holds the three vertices that make up a given triangle.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Vertices.CyclicalList`1">
            <summary>
            Implements a List structure as a cyclical list where indices are wrapped.
            </summary>
            <typeparam name="T">The Type to hold in the list.</typeparam>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Vertices.IndexableCyclicalLinkedList`1">
            <summary>
            Implements a LinkedList that is both indexable as well as cyclical. Thus
            indexing into the list with an out-of-bounds index will automatically cycle
            around the list to find a valid node.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.IndexableCyclicalLinkedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the node at a given index.
            </summary>
            <param name="index">The index of the node to remove.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Vertices.IndexableCyclicalLinkedList`1.IndexOf(`0)">
            <summary>
            Finds the index of a given item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>The index of the item if found; -1 if the item is not found.</returns>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.Vertices.IndexableCyclicalLinkedList`1.Item(System.Int32)">
            <summary>
            Gets the LinkedListNode at a particular index.
            </summary>
            <param name="index">The index of the node to retrieve.</param>
            <returns>The LinkedListNode found at the index given.</returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.Vertices.WindingOrder">
            <summary>
            Specifies a desired winding order for the shape vertices.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.PolygonCreationAssistance">
            <summary>
            Class used as a data container and helper for the texture-to-vertices code.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.IsConvex">
            <summary>
            Assuming the polygon is simple, checks if it is convex.
            </summary>
            <returns>
            	<c>true</c> if this instance is convex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.Add(FarseerGames.FarseerPhysics.Collisions.Triangle)">
             <summary>
             Tries to add a triangle to the polygon. Returns null if it can't connect
             properly, otherwise returns a pointer to the new Polygon. Assumes bitwise
             equality of joined vertex positions.
            
             For internal use.
             </summary>
             <param name="t">The triangle to add.</param>
             <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.ResolvePinchPoint(FarseerGames.FarseerPhysics.Collisions.Polygon,FarseerGames.FarseerPhysics.Collisions.Polygon@,FarseerGames.FarseerPhysics.Collisions.Polygon@)">
            <summary>
            Finds and fixes "pinch points," points where two polygon
            vertices are at the same point.
            If a pinch point is found, pin is broken up into poutA and poutB
            and true is returned; otherwise, returns false.
            Mostly for internal use.
            </summary>
            <param name="pin">The pin.</param>
            <param name="poutA">The pout A.</param>
            <param name="poutB">The pout B.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.TriangulatePolygon(System.Single[],System.Single[],System.Int32,FarseerGames.FarseerPhysics.Collisions.Triangle[]@)">
             <summary>
             Triangulates a polygon using simple ear-clipping algorithm. Returns
             size of Triangle array unless the polygon can't be triangulated.
             This should only happen if the polygon self-intersects,
             though it will not _always_ return null for a bad polygon - it is the
             caller's responsibility to check for self-intersection, and if it
             doesn't, it should at least check that the return value is non-null
             before using. You're warned!
            
             Triangles may be degenerate, especially if you have identical points
             in the input to the algorithm.  Check this before you use them.
            
             This is totally unoptimized, so for large polygons it should not be part
             of the simulation loop.
            
             Returns:
             -1 if algorithm fails (self-intersection most likely)
             0 if there are not enough vertices to triangulate anything.
             Number of triangles if triangulation was successful.
            
             results will be filled with results - ear clipping always creates vNum - 2
             or fewer (due to pinch point polygon snipping), so allocate an array of
             this size.
             </summary>
             <param name="xv">The xv.</param>
             <param name="yv">The yv.</param>
             <param name="vNum">The v num.</param>
             <param name="results">The results.</param>
             <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.Remainder(System.Int32,System.Int32)">
            <summary>
            Fix for obnoxious behavior for the % operator for negative numbers...
            </summary>
            <param name="x">The x.</param>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.PolygonizeTriangles(FarseerGames.FarseerPhysics.Collisions.Triangle[],System.Int32,FarseerGames.FarseerPhysics.Collisions.Polygon[]@,System.Int32)">
             <summary>
             Turns a list of triangles into a list of convex polygons. Very simple
             method - start with a seed triangle, keep adding triangles to it until
             you can't add any more without making the polygon non-convex.
            
             Returns an integer telling how many polygons were created.  Will fill
             polys array up to polysLength entries, which may be smaller or larger
             than the return value.
             
             Takes O(N///P) where P is the number of resultant polygons, N is triangle
             count.
             
             The final polygon list will not necessarily be minimal, though in
             practice it works fairly well.
             </summary>
             <param name="triangulated">The triangulated.</param>
             <param name="triangulatedLength">Length of the triangulated.</param>
             <param name="polys">The polys.</param>
             <param name="polysLength">Length of the polys.</param>
             <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.IsEar(System.Int32,System.Single[],System.Single[],System.Int32)">
             <summary>
             Checks if vertex i is the tip of an ear in polygon defined by xv[] and
             yv[].
            
             Assumes clockwise orientation of polygon...ick
             </summary>
             <param name="i">The i.</param>
             <param name="xv">The xv.</param>
             <param name="yv">The yv.</param>
             <param name="xvLength">Length of the xv.</param>
             <returns>
             	<c>true</c> if the specified i is ear; otherwise, <c>false</c>.
             </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.Polygon.DecomposeConvex(FarseerGames.FarseerPhysics.Collisions.Polygon,FarseerGames.FarseerPhysics.Collisions.Polygon[]@,System.Int32)">
             <summary>
             Decomposes a non-convex polygon into a number of convex polygons, up
             to maxPolys (remaining pieces are thrown out, but the total number
             is returned, so the return value can be greater than maxPolys).
            
             Each resulting polygon will have no more than maxVerticesPerPolygon
             vertices (set to b2MaxPolyVertices by default, though you can change
             this).
             
             Returns -1 if operation fails (usually due to self-intersection of
             polygon).
             </summary>
             <param name="p">The p.</param>
             <param name="results">The results.</param>
             <param name="maxPolys">The max polys.</param>
             <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.PolyUnionError">
            <summary>
            Enumerator to specify errors with Polygon functions.
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider">
            <summary>
            Spartial hashing stores all the geometries that can collide in a list.
            Using this algorithm, you can quickly tell what objects might collide in a certain area.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider.ProcessRemovedGeoms">
            <summary>
             Not required by collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider.ProcessDisposedGeoms">
            <summary>
             Not required by collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider.Add(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
             Not required by collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Collisions.SpatialHashCollider.OnBroadPhaseCollision">
            <summary>
            Fires when a broad phase collision occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.ContactId">
            <summary>
            Used in collision detection
            Provides an implementation that gives an ID for contacts
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.ContactId.Geom1Index">
            <summary>
            Gets or sets the index of geom1.
            </summary>
            <Value>The index of the geom1.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.ContactId.Geom1Vertex">
            <summary>
            Gets or sets the geom1 vertex.
            </summary>
            <Value>The geom1 vertex.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.ContactId.Geom2Index">
            <summary>
            Gets or sets the index of geom2.
            </summary>
            <Value>The index of the geom2.</Value>
        </member>
        <member name="T:Spectrum.SpectrumGame">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="M:Spectrum.SpectrumGame.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:Spectrum.SpectrumGame.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:Spectrum.SpectrumGame.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:Spectrum.SpectrumGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:Spectrum.SpectrumGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="T:Spectrum.Model.Globals">
            Declares constant string names as static globals
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Mathematics.Calculator">
            <summary>
            A calculator with common math functions and constants.
            </summary>
        </member>
        <member name="F:FarseerGames.FarseerPhysics.Mathematics.Calculator._tPow2">
            Temp variables to speed up the following code.
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Mathematics.Calculator.LinearBezierCurve(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="t">Value between 0.0f and 1.0f.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Mathematics.Calculator.QuadraticBezierCurve(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="curve"></param>
            <param name="end"></param>
            <param name="t">Value between 0.0f and 1.0f.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.SpringFactory">
            <summary>
            An easy to use factory for creating controllers (springs)
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.ControllerFactory">
            <summary>
            An easy to use factory for creating controllers (springs)
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Controllers.GravityController">
            <summary>
            This class offers a way to simulate planetary gravity.
            You can get 2 types of gravity: Distance Squared and Linear.
            Distance Squared is the realistic method to apply gravity.
            Linear is a simpler method of calculating the strength but will not be very realistic (or significantly impact performance).
            you can also specify a maximum strength and radius.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.GravityController.#ctor(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Dynamics.Body},System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},System.Single,System.Single)">
            <summary>
            Initializes the GravityController.
            </summary>
            <param name="simulator">The physicsSimulator used by this controller.</param>
            <param name="bodies">The bodies that you want to generate gravity.</param>
            <param name="points">The points that you want to generate gravity.</param>
            <param name="strength">the strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.GravityController.#ctor(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Dynamics.Body},System.Single,System.Single)">
            <summary>
            Initializes the GravityController.
            </summary>
            <param name="simulator">The physicsSimulator used by this controller.</param>
            <param name="bodies">The bodies that you want to generate gravity.</param>
            <param name="strength">the strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Controllers.GravityController.#ctor(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},System.Single,System.Single)">
            <summary>
            Initializes the GravityController.
            </summary>
            <param name="simulator">The physicsSimulator used by this controller.</param>
            <param name="points">The points that you want to generate gravity.</param>
            <param name="strength">the strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.GravityController.PointList">
            <summary>
            The list of points that act as gravity generators.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Controllers.GravityController.BodyList">
            <summary>
            The list of bodies that act as gravity generators.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.ScalingController.MaximumUpdateInterval">
            <summary>
            The maximum interval to use
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.ScalingController.UpdateInterval">
            <summary>
            Returns or sets the interval in seconds in which the simulator is being updated
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.JointFactory">
            <summary>
            An easy to use factory for creating joints
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.JointFactory.CreateFixedRevoluteJoint(FarseerGames.FarseerPhysics.Dynamics.Body,Microsoft.Xna.Framework.Vector2)">
            <exception cref="T:System.InvalidOperationException">Fixed joints cannot be created on static bodies</exception>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Factories.ComplexFactory">
            <summary>
            An easy to use factory for creating complex structures
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(FarseerGames.FarseerPhysics.PhysicsSimulator,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Single,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain from start to end points containing the specified number of links.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add the chain to.</param>
            <param name="start">Starting point of the chain.</param>
            <param name="end">Ending point of the chain.</param>
            <param name="links">Number of links desired in the chain.</param>
            <param name="height">Height of each link.</param>
            <param name="mass">Mass of each link.</param>
            <param name="type">The joint/spring type.</param>
            <returns>Path</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Single,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain from start to end points containing the specified number of links.
            </summary>
            <param name="start">Starting point of the chain.</param>
            <param name="end">Ending point of the chain.</param>
            <param name="links">Number of links desired in the chain.</param>
            <param name="height">Height of each link.</param>
            <param name="mass">Mass of each link.</param>
            <param name="type">The joint/spring type.</param>
            <returns>Path</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(FarseerGames.FarseerPhysics.PhysicsSimulator,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain from start to end points containing the specified number of links.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add the chain too.</param>
            <param name="start">Starting point of the chain.</param>
            <param name="end">Ending point of the chain.</param>
            <param name="links">Number of links desired in the chain.</param>
            <param name="mass">Mass of each link.</param>
            <param name="type">The joint/spring type.</param>
            <returns>Path</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Int32,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="links">The links.</param>
            <param name="mass">The mass.</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(FarseerGames.FarseerPhysics.PhysicsSimulator,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add the chain to.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(FarseerGames.FarseerPhysics.PhysicsSimulator,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add the chain to.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="pinStart">if set to <c>true</c> [pin start].</param>
            <param name="pinEnd">if set to <c>true</c> [pin end].</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(FarseerGames.FarseerPhysics.PhysicsSimulator,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="physicsSimulator"><see cref="T:FarseerGames.FarseerPhysics.PhysicsSimulator"/> to add the chain to.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="linkWidth">The distance between links.</param> 
            <param name="mass">The mass.</param>
            <param name="pinStart">if set to <c>true</c> [pin start].</param>
            <param name="pinEnd">if set to <c>true</c> [pin end].</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="pinStart">if set to <c>true</c> [pin start].</param>
            <param name="pinEnd">if set to <c>true</c> [pin end].</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateChain(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a chain.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="linkWidth">The distance between links.</param> 
            <param name="mass">The mass.</param>
            <param name="pinStart">if set to <c>true</c> [pin start].</param>
            <param name="pinEnd">if set to <c>true</c> [pin end].</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateTrack(FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single,System.Single,System.Single,System.Boolean,System.Int32,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a track.
            </summary>
            <param name="points">The points.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="endless">if set to <c>true</c> [endless].</param>
            <param name="collisionGroup">Collision group for the chain.</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateTrack(FarseerGames.FarseerPhysics.PhysicsSimulator,FarseerGames.FarseerPhysics.Collisions.Vertices,System.Single,System.Single,System.Single,System.Boolean,System.Int32,FarseerGames.FarseerPhysics.LinkType)">
            <summary>
            Creates a track.
            </summary>
            <param name="physicsSimulator">The physics simulator.</param>
            <param name="points">The points.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="mass">The mass.</param>
            <param name="endless">if set to <c>true</c> [endless].</param>
            <param name="collisionGroup">Collision group for the chain.</param>
            <param name="type">The joint/spring type.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateGravityController(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Dynamics.Body},FarseerGames.FarseerPhysics.GravityType,System.Single,System.Single)">
            <summary>
            Creates a gravity controller and adds it to the physics simulator.
            </summary>
            <param name="simulator">the physicsSimulator used by this controller.</param>
            <param name="bodies">The bodies you want to generate gravity.</param>
            <param name="type">the type of gravity this uses.</param>
            <param name="strength">the maximum strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateGravityController(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{FarseerGames.FarseerPhysics.Dynamics.Body},System.Single,System.Single)">
            <summary>
            Creates a gravity controller and adds it to the physics simulator.
            </summary>
            <param name="simulator">the physicsSimulator used by this controller.</param>
            <param name="bodies">The bodies you want to generate gravity.</param>
            <param name="strength">the maximum strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateGravityController(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},FarseerGames.FarseerPhysics.GravityType,System.Single,System.Single)">
            <summary>
            Creates a gravity controller and adds it to the physics simulator.
            </summary>
            <param name="simulator">the physicsSimulator used by this controller.</param>
            <param name="points">The points you want to generate gravity.</param>
            <param name="type">the type of gravity this uses.</param>
            <param name="strength">the maximum strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Factories.ComplexFactory.CreateGravityController(FarseerGames.FarseerPhysics.PhysicsSimulator,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},System.Single,System.Single)">
            <summary>
            Creates a gravity controller and adds it to the physics simulator.
            </summary>
            <param name="simulator">the physicsSimulator used by this controller.</param>
            <param name="points">The points you want to generate gravity.</param>
            <param name="strength">the maximum strength of gravity (the gravity strength when two bodies are on the same spot)</param>
            <param name="radius">the maximum distance that can be between 2 bodies before it will stop trying to apply gravity between them.</param>
            <returns></returns>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider">
            <summary>
            A broad phase collider that uses a brute force algorithm.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider.ProcessRemovedGeoms">
            <summary>
             Not required by brute force collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider.ProcessDisposedGeoms">
            <summary>
             Not required by brute force collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider.Add(FarseerGames.FarseerPhysics.Collisions.Geom)">
            <summary>
             Not required by brute force collider
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="E:FarseerGames.FarseerPhysics.Collisions.BruteForceCollider.OnBroadPhaseCollision">
            <summary>
            Fires when a broad phase collision occurs
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerPhysics.Collisions.AABB">
            <summary>
            Axis Aligned Bounding Box. Can be used to check for intersections with other AABBs.
            Use AABB.Intersect() to check for intersections.
            </summary>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.GetVertices">
            <summary>
            Gets the vertices of the AABB.
            </summary>
            <returns>The corners of the AABB</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.GetCenter">
            <summary>
            Gets the center.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.GetShortestSide">
            <summary>
            Gets the shortest side.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.GetDistance(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Gets the distance to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The distance</returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.GetDistance(Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Gets the distance to the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.Update(FarseerGames.FarseerPhysics.Collisions.Vertices@)">
            <summary>
            Updates the AABB with the specified vertices.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines whether the AAABB contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if it contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.Contains(Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Determines whether the AAABB contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if it contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FarseerGames.FarseerPhysics.Collisions.AABB.Intersect(FarseerGames.FarseerPhysics.Collisions.AABB@,FarseerGames.FarseerPhysics.Collisions.AABB@)">
            <summary>
            Check if 2 AABBs intersects
            </summary>
            <param name="aabb1">The first AABB.</param>
            <param name="aabb2">The second AABB</param>
            <returns></returns>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.AABB.Min">
            <summary>
            Gets the min.
            </summary>
            <Value>The min.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.AABB.Max">
            <summary>
            Gets the max.
            </summary>
            <Value>The max.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.AABB.Width">
            <summary>
            Gets the width.
            </summary>
            <Value>The width.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.AABB.Height">
            <summary>
            Gets the height.
            </summary>
            <Value>The height.</Value>
        </member>
        <member name="P:FarseerGames.FarseerPhysics.Collisions.AABB.Position">
            <summary>
            Gets or sets the position of the AABB
            </summary>
            <value>The position.</value>
        </member>
    </members>
</doc>
